
smarttemp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ed  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000576  00000000  00000000  000007b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000246  00000000  00000000  00000d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000f78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030b  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000066  00000000  00000000  000012c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000132d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 56 00 	call	0xac	; 0xac <main>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <adc_init>:
#ifndef KEYPAD_H_
#define KEYPAD_H_
#include <avr/io.h>        // Include AVR input/output library for I/O operations
#include <util/delay.h>    // Include delay utility for timing functions
void adc_init(){
	ADMUX&=~(1<<REFS1);//---AVCC with external
  6c:	87 b1       	in	r24, 0x07	; 7
  6e:	8f 77       	andi	r24, 0x7F	; 127
  70:	87 b9       	out	0x07, r24	; 7
	ADMUX|=(1<<REFS0);// ---capacitor at AREF pin
  72:	87 b1       	in	r24, 0x07	; 7
  74:	80 64       	ori	r24, 0x40	; 64
  76:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);//div factor =128 law the freq  of conversation
  78:	86 b1       	in	r24, 0x06	; 6
  7a:	87 60       	ori	r24, 0x07	; 7
  7c:	86 b9       	out	0x06, r24	; 6
	ADCSRA|=(1<<ADEN);//Enable
  7e:	86 b1       	in	r24, 0x06	; 6
  80:	80 68       	ori	r24, 0x80	; 128
  82:	86 b9       	out	0x06, r24	; 6
  84:	08 95       	ret

00000086 <adc_read>:
}
int adc_read(char ch){
	ch&=0b00000111; //check channel 0->7
  86:	87 70       	andi	r24, 0x07	; 7
	ADMUX&=0b11111000;//clear old channel
  88:	97 b1       	in	r25, 0x07	; 7
  8a:	98 7f       	andi	r25, 0xF8	; 248
  8c:	97 b9       	out	0x07, r25	; 7
	ADMUX|=ch;//set new channel
  8e:	97 b1       	in	r25, 0x07	; 7
  90:	89 2b       	or	r24, r25
  92:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=1<<ADSC;//start new conversation
  94:	86 b1       	in	r24, 0x06	; 6
  96:	80 64       	ori	r24, 0x40	; 64
  98:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA&(1<<ADSC));//wait till the reading is finish
  9a:	36 99       	sbic	0x06, 6	; 6
  9c:	fe cf       	rjmp	.-4      	; 0x9a <adc_read+0x14>
	return (ADCL|(ADCH<<8));//return 10 bit in int max= 1023
  9e:	24 b1       	in	r18, 0x04	; 4
  a0:	85 b1       	in	r24, 0x05	; 5
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	98 2f       	mov	r25, r24
  a6:	88 27       	eor	r24, r24
}
  a8:	82 2b       	or	r24, r18
  aa:	08 95       	ret

000000ac <main>:
 */ 

#include <avr/io.h>
#include "adc.h"
int main(void){
	DDRC=0xff;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	84 bb       	out	0x14, r24	; 20
	DDRA=0;
  b0:	1a ba       	out	0x1a, r1	; 26
	PORTC=0;
  b2:	15 ba       	out	0x15, r1	; 21
	adc_init();
  b4:	0e 94 36 00 	call	0x6c	; 0x6c <adc_init>
    while (1) {
		int tempread = adc_read(0);
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 43 00 	call	0x86	; 0x86 <adc_read>
		if (tempread>30){
  be:	8f 31       	cpi	r24, 0x1F	; 31
  c0:	91 05       	cpc	r25, r1
  c2:	1c f0       	brlt	.+6      	; 0xca <main+0x1e>
			PORTC=0b00000001;
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	85 bb       	out	0x15, r24	; 21
  c8:	f7 cf       	rjmp	.-18     	; 0xb8 <main+0xc>
		}else if (tempread<10){
  ca:	0a 97       	sbiw	r24, 0x0a	; 10
  cc:	1c f4       	brge	.+6      	; 0xd4 <main+0x28>
			PORTC=0b00000010;
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	85 bb       	out	0x15, r24	; 21
  d2:	f2 cf       	rjmp	.-28     	; 0xb8 <main+0xc>
		}else{
			PORTC=0;
  d4:	15 ba       	out	0x15, r1	; 21
  d6:	f0 cf       	rjmp	.-32     	; 0xb8 <main+0xc>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
